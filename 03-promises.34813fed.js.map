{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAqBA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EAEFF,EAAQ,uBAAqBH,QAAiBC,OAG9CG,EAAO,sBAAoBJ,QAAeC,MAAU,GAErDA,EAAM,G,CA9BEQ,SAASC,cAAc,QAE/BC,iBAAiB,UAExB,SAAsBC,GACpBA,EAAEC,iBAEF,MAAMZ,MAAEA,EAAKa,KAAEA,EAAIC,OAAEA,GAAWH,EAAEI,OAAOC,SAEzC,IAAIC,GAAcjB,EAAMkB,MACxB,IAAK,IAAIC,EAAI,EAAGA,IAAML,EAAOI,MAAOC,IAClCF,EAAmB,IAANE,EAAUF,IAAcJ,EAAKK,OAASlB,EAAMkB,MAEzDpB,EAAcqB,EAAGF,GACdG,MAAKC,GAAOzB,EAAA0B,OAAOC,QAAQF,KAC3BG,OAAMC,GAAS7B,EAAA0B,OAAOI,QAAQD,I","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formEl = document.querySelector('form');\n\nformEl.addEventListener('submit', handleSubmit);\n\nfunction handleSubmit(e) {\n  e.preventDefault();\n\n  const { delay, step, amount } = e.target.elements;\n\n  let countDelay = +delay.value;\n  for (let i = 1; i <= +amount.value; i++) {\n    countDelay = i !== 1 ? countDelay + +step.value : +delay.value;\n\n    createPromise(i, countDelay)\n      .then(val => Notify.success(val))\n      .catch(error => Notify.failure(error));\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      } else {\n        // Reject\n        reject(`❌ Rejected promise ${position} in ${delay}ms`);\n      }\n    }, delay);\n  });\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","e","preventDefault","step","amount","target","elements","countDelay","value","i","then","val","Notify","success","catch","error","failure"],"version":3,"file":"03-promises.34813fed.js.map"}